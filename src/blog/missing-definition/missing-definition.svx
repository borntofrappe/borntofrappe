---
title: Missing definition
description: Look to a feature defined for custom and standard elements alike.
date: 2024-04-23T14:45:17
---

<script>
	import { onMount } from 'svelte';

	onMount(() => {
		if (customElements && !customElements.get('toggle-button')) {
      // svelte-ignore perf_avoid_nested_class
			class ToggleButton extends HTMLButtonElement {
				constructor() {
					super();
				}

				connectedCallback() {
					this.setAttribute('role', 'switch');
					this.setAttribute('aria-checked', 'false');

					this.addEventListener('click', () => {
						const checked = this.getAttribute('aria-checked') === 'true';
						this.setAttribute('aria-checked', (!checked).toString());
					});
				}
			}

			customElements.define('toggle-button', ToggleButton, {
				extends: 'button'
			});
		}
	});
</script>

Among the two types of [custom elements](/is-something-memorable), _customized built-in_ elements give you the option to elevate valid markup. With them you are able to provide additional features on top of elements which are already understood by browsers, with native functionalities and semantics. You could, for instance, take a regular button with an "on" and "off" label.

```html
<button>
	<span>On</span>
	<span>Off</span>
</button>
```

And augment the control to become a full-blown toggle.

After you build the class to manage the toggle-like interaction, after you find a label for the custom element, you expand the `button` element with the `is` attribute.

```html
<button is="toggle-button">
	<span>On</span>
	<span>Off</span>
</button>
```

When the script runs, then, the task is complete. You can satisfy the need for a pointless switch.

<!-- svelte-ignore avoid-is -->
<button aria-label="Pointless toggle" style="--toggle-color: hsl(210 16% 93%); --toggle-background: hsl(210 10% 23%); --toggle-outline: hsl(210 10% 23%)" is="toggle-button">
    <span>on</span>
    <span>off</span>
</button>

When the script runs, however. _If_ the script ever runs. Up until that point the button still lives on the page. You might want to preclude this, to show the element only after it is upgraded in full.

In terms of custom elements, [CSS offers a solution](pseudo-control#branch-outside) with the `:defined` pseudo class. Target a custom element and you can check when the same has been defined.

```css
custom-element-name:defined {
	/* ... */
}
```

With the `:not` function you can then test the opposite, when the element has yet to be resolved.

```css
custom-element-name:not(:defined) {
	/* ... */
}
```

For customized built-in elements this poses a challenge. You can't find the node with the invented name.

```css
toggle-button:not(:defined) {
	/* ... */
}
```

The snippet won't work, and to be fair, it would be surprising if it did. As far the browser, CSS, and even HTML are concerned, there's no such thing in the document. There would be if you were to build an _autonomous_ custom element, and spell out the matching tags.

```html
<toggle-button>
	<!-- ... -->
</toggle-button>
```

Luckily, there is a solution considering one important fact. Some features, like the `:host` pseudo class, are exclusive to custom elements. Outside of the specification, they serve no use. But other features, like `:defined`, have a larger scope, and are applicable to the wider document. This means one of two things:

1. you can technically target _any_ standard HTML element with the `:defined` suffix

   ```css
   *:defined {
   	/* ... */
   }
   ```

   It would be close to pointless, however, as the condition would always match.

2. you can solve the issue at hand

   If you enjoy CSS selectors, then, you can even refine the code to consider only the toggle, only the element with the chosen `is` attribute

   ```css
   [is='toggle-button']:not(:defined) {
   	/* ... */
   }
   ```

   Once you do, you can hide the content with ease.

   ```css
   [is='toggle-button']:not(:defined) {
   	display: none;
   }
   ```

   Without the script, the element is pointless, and fittingly hidden. With it, it might still be pointless, or of a much greater use. Either way, you'll have something to click.

<style>
	:global([is='toggle-button']:not(:defined)) {
		display: none;
	}

	:global([is='toggle-button']) {
		--_color: var(--toggle-color, hsl(0 0% 90%));
		--_background: var(--toggle-background, hsl(0 0% 20%));
		--_outline: var(--toggle-outline, hsl(0 0% 20%));
		font-family: inherit;
		font-size: 1rem;
		font-weight: 700;
		text-transform: uppercase;
		color: var(--_color);
		background: var(--_background);
		padding: 0.25rem;
		border: none;
		border-radius: 1e5px;
	}

	:global([is='toggle-button'] > span) {
		display: inline-block;
		padding: 0.25rem 0.5rem;
		border-radius: inherit;
	}

	:global([is='toggle-button']:focus-visible) {
		outline: 2px solid var(--_outline);
		outline-offset: 2px;
	}

	:global([is='toggle-button'][aria-checked='true'] span:first-child) {
		color: var(--_background);
		background: var(--_color);
	}

	:global([is='toggle-button'][aria-checked='false'] span:last-child) {
		color: var(--_background);
		background: var(--_color);
	}
</style>
