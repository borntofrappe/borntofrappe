---
title: The faces of the moon
description: Crafting a new vector graphic
date: 2023-02-20T09:23:27
---

<script>
    import Center from '$lib/components/blog/Center.svelte';

    import svg from './svg.js'

    import Claire from './Claire.svelte'
    import ClipPath from './ClipPath.svelte'
</script>

Up in the sky, sometimes on the opposite end of [a jovial presence](/ray-of-light), you might spot a new face.

A nice, soft, expression.

<Center maxInlineSize="28rem">
  {@html svg['claire-light']}
</Center>

Surrounded by stars which differ in size and details.

<Center maxInlineSize="28rem">
  {@html svg['claire-stars']}
</Center>

Joyfully bouncing and following the approaching cursor.

<Claire applyTransition={false} />

You may think this a shallow copy of the radiant character, but not by the end of the article. Especially if you have the time to take a breather and wait for a handful of seconds. And maybe a handful more.

But let's proceed in order, let's start from the top.

## Face

There is nothing inherently unique in the first visual. Just a series of overlapping `<circle>`s with a precise color. For the body, the eyes, but also the small craters adding detail in the bottom right section.

Circles and a `<path>` element for a cheerful mug.

<!-- prettier-ignore -->
```html
<g 
    fill="#dad35f" 
    stroke="#dad35f" 
    stroke-width="2" 
    stroke-linejoin="round" 
    stroke-linecap="round">
	<path d="M -1.5 0 v 1.5 a 1.5 1.5 0 0 0 3 0 v -1.5z" />
</g>
```

## Stars

There are a few stars so distant to make the `<circle>` element a good fit.

```html
<g fill="#dad35f">
	<circle cx="-48" cy="-46" r="1" />
	<circle cx="-40" cy="-38" r="1.1" />
	<!-- ... -->
</g>
```

There are other, however, which shimmer with a more distinct shape.

```html
<path
	fill="#dad35f"
	stroke="#dad35f"
	stroke-width="1"
	stroke-linejoin="round"
	stroke-linecap="round"
	d="M -4 0 l 2.5 1.5 1.5 2.5 1.5 -2.5 2.5 -1.5 -2.5 -1.5 -1.5 -2.5 -1.5 2.5z"
/>
```

I repeat the shape here and there, in different spots and sizes, making a case for an SVG definition. Define the path early, in a `<defs>` block to avoid drawing the element immediately.

```html
<defs>
	<path
		id="star"
		...
		d="M -4 0 l 2.5 1.5 1.5 2.5 1.5 -2.5 2.5 -1.5 -2.5 -1.5 -1.5 -2.5 -1.5 2.5z"
	/>
</defs>
```

Repeat the custom visual through the `<use>` element, referencing the `id` attribute.

```html
<use href="#star" x="35" y="-38" />
```

You can place the element through the `x` and `y` attributes, but also with a translation. This option is rather useful the moment you want to change the size.

```html
<use href="#star" transform="translate(-38 28) scale(0.8)" />
```

You move the star in position, and change its scale in the precise (x, y) coordinate.

## Faces

Perhaps expectedly, the mascot hides a side. For the alternative, start with a darker body and and even darker details.

<Center maxInlineSize="28rem">
  {@html svg['claire-face']}
</Center>

These are the same shapes with a grave fill and stroke.

```diff
-<circle r="28" fill="#f2ec64" />
+<circle r="28" fill="#dad35f" />

-<g fill="#dad35f">
+<g fill="#bfb5f5">
```

But wait, no circles for the eyes? Unlike the energy-filled center of the galaxy, our satellite enjoys the occasional break. In a moment of pause the eyes close and all you see is an outline, a nice set of eyelashes. These are shapes shown in stroke only.

<!-- prettier-ignore -->
```html
<g 
    fill="none" 
    stroke="#bfb5f5" 
    stroke-width="1" 
    stroke-linejoin="round" 
    stroke-linecap="round">
	<!--  -->
</g>
```

Start with an arc.

```html
<path stroke-width="1.5" d="M -4 0 a 4 4 0 0 0 8 0" />
```

Continue with a line escaping the semicircle from below.

```html
<path d="M 0 4 v 2" />
```

Repeat the segment rotating the `<path>` at different angles.

```html
<path transform="rotate(-60)" d="M 0 4 v 2" />
<path transform="rotate(60)" d="M 0 4 v 2" />
<path transform="rotate(-30)" d="M 0 4 v 2" />
<path transform="rotate(30)" d="M 0 4 v 2" />
```

As you rotate the path, from the center of the arc, the vertical piece is drawn now on the left, now on the right, completing the rather convincing visual.

<Center maxInlineSize="20rem">
  {@html svg['eyelash']}
</Center>

Since you need a pair, it helps to rehearse the logic introduced with the stars. Define the shape, this time with the group element wrapping around the multiple `<path>`s.

```html
<defs>
	<g
		id="eyelash"
		fill="none"
		stroke-width="1"
		stroke="#bfb5f5"
		stroke-linejoin="round"
		stroke-linecap="round"
	>
		<!-- ... -->
	</g>
</defs>
```

Use and repeat.

<!-- prettier-ignore -->
```html
<use href="#eyelash" x="-10" y="-4" />
<use href="#eyelash" x="10" y="-4" />
```

Added in the top half, the two complete the sombre look.

<Center maxInlineSize="28rem">
  {@html svg['claire-dark']}
</Center>

## Clip path

We have to faces, but show only one at a time. The goal is to move from one to the other, slowly, but smoothly. This calls for a CSS animation, but first, a way to hide SVG elements.

Indeed, the moment you draw the two faces.

```html
<g>
	<circle r="28" fill="#dad35f" />
	<!-- ... -->
</g>

<g>
	<circle r="28" fill="#f2ec64" />
	<!-- ... -->
</g>
```

You'll see only the last one.

<Center maxInlineSize="28rem">
  {@html svg['face-overlap']}
</Center>

You see the lighter variant, but the other side is effectively drawn. Just earlier. Just behind.

To hide the bright face, and grant that long-awaited break, SVG offers the `<clipPath>` element.

Technically, you don't need to add the element in the `<defs>` block â€” a clip doesn't show anything on the screen. That being said, I like to keep things separate, I prefer to define the helper alongside the other shapes.

```html
<defs>
	<clipPath id="clip">
		<!-- ... -->
	</clipPath>
</defs>
```

Regardless, you create clip and then apply the same through the `clip-path` attribute, say on the lighter, later face.

```html
<g clip-path="url(#clip)">
	<circle r="28" fill="#f2ec64" />
	<!-- ... -->
</g>
```

The area described by the clip dictates what is actually shown on screen. Shapes falling inside of this area will be visible, while other will be, well, clipped.

In this specific instance, the result is that the bright face completely disappears.

<Center maxInlineSize="28rem">
  {@html svg['face-clip']}
</Center>

The `<clipPath>` is empty, there is no clippable area, and the entire face is removed from sight.

```html
<clipPath id="clip">
	<!-- ... -->
</clipPath>
```

A good measure for the clip is the area described by the larger circle. What was the radius, however? We could look up the value, but suggests a minor tweak to the SVG syntax.

We are going to repeat the circle at least thrice, in the clip and in each of the two faces. We are going to _use_ the shape again and again. It is therefore convenient to fall back in the `<defs>` block. It is convenient to define the circle once and for all.

Define.

```html
<defs>
	<circle id="face-circle" r="28" />
</defs>
```

Use:

- in the clip

  ```html
  <clipPath id="clip">
  	<use href="#face-circle" />
  </clipPath>
  ```

- for the two faces

  ```html
  <use href="#face-circle" fill="#dad35f" />

  <use href="#face-circle" fill="#f2ec64" />
  ```

Allow to change the position of the clipped, light face.

```html
<g clip-path="url(#clip)">
	<g transform="translate(5 -5)">
		<use href="#face-circle" fill="#f2ec64" />
		<!-- ... -->
	</g>
</g>
```

And there you have it, a momentous reveal.

<ClipPath x={20} y={-20} transformClip={false} />

Except that, something is quite off...

The faces describes the sides of the same body and, barring a minor interaction, should stay in place. What should move is the area revealing the hidden shapes. What should move is the clip.

```html
<clipPath id="clip" transform="translate(5 -5)">
	<use href="#face-circle" />
</clipPath>
```

That's the result we were looking for.

<ClipPath x={20} y={-20} transformClip={true} />

## Transition

Updating the position manually is already entertaining, but with CSS we are able to change the values over time.

Target the clip, be it through the element or a selector of your choosing, and apply the animation.

```css
clipPath {
	animation: translate 20s infinite;
}
```

Finally, create the animation to have the clip move from the top right, pause in the center, and then retreat in the bottom left corner.

```css
@keyframes translate {
	0%,
	12.5% {
		transform: translate(50px, -50px);
	}

	37.5%,
	62.5% {
		transform: translate(0px, 0px);
	}

	87.5%,
	100% {
		transform: translate(-50px, 50px);
	}
}
```

The perfect point to add the stars back, perhaps the interaction as well. All leading up to the finally distinct, unique presence in the sky.

<Claire transition={true} />
