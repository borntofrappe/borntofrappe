---
title: Color me impressed
description: Paint pixels with SVG filters, matrix algebra your own flair.
date: 2023-08-24T15:34:56
---

<script>
    import Center from '$lib/components/blog/Center.svelte';

	import html from './html.js';
	
	import Intro from './Intro.svelte';
	import Tint from './Tint.svelte';
</script>

<Intro />

Take an `<svg>` element, detailing a crisp, pixelated graphic. You can set the color of its many shapes with the `fill` or `stroke` attribute.

```html
<path stroke="hsl(85 6% 62%)" d="M 16 0 h 18 ..." />
<path stroke="hsl(83 10% 42%)" d="M 34 0 h 1 ..." />
```

This sets you up with one visual and precise colors. What `feColorMatrix` allows is to tweak the design, tweak the appearance by changing the colors down to the smallest unit, down to the single pixel.

```html
<filter id="color-filter">
	<feColorMatrix type="" values="" />
</filter>

<g filter="url(#color-filter)">
	<!-- ...paths -->
</g>
```

The element takes the source graphic and returns an output image, updated per at least two attributes: `type` and `values`. And the two open a lot of possibilities with even the most simplistic instructions.

With a type of `saturate` change the saturation.

```html
<feColorMatrix type="saturate" values="1" />
```

A value of 1 leaves the shapes untouched, and greater numbers increase the saturation. Smaller numbers strip out the color, and a value of 0 removes every hue.

```html
<feColorMatrix type="saturate" values="0" />
```

Your precious picture goes back in time, essentially grayscale.

<Center element="figure" maxInlineSize="20rem">
    {@html html['saturate']}
</Center>

With a type of `hueRotate` spin the colors around the color wheel.

```html
<feColorMatrix type="hueRotate" values="120" />
```

The number rotates the hues in the 0 to 360 range, through red, green and blue.

```html
<feColorMatrix type="hueRotate" values="240" />
```

Your red-infused sprite moves between versons, exploring the available spectrum.

<Center element="figure" maxInlineSize="30rem">
    {@html html['hueRotate']}
</Center>

The two operations are immediate, and already allow for intriguing changes. For a more refined touch, however, the primitive supports yet another type, `matrix`.

```html
<feColorMatrix
	type="matrix"
	values="
		r1 r2 r3 r4 r5
		g1 g2 g3 g4 g5
		b1 b2 b3 b4 b5
		a1 a2 a3 a4 a5
	"
/>
```

In the `values` attribute you add a string of 20 numbers. Numbers you can arrange in four neat rows to modify four distinct channels: red, green, blue and alpha.

Technically, the values are piped in a larger matrix, and multiplied with the existing channels to obtain a new set of values. For every pixel.

{@html html['matrix-multiplication']}

And in detail, each value is found multiplying all possible channels with the chosen weights.

{@html html['red-multiplication']}

This means one of two things: an _identity matrix_, composed of 1s along the diagonal, leaves the picture unstyled. This is much similar to the type of `saturate` with a value of 1.

```html
<feColorMatrix
	type="matrix"
	values="
		1 0 0 0 0
		0 1 0 0 0
		0 0 1 0 0
		0 0 0 1 0
	"
/>
```

A different string, increasing the weights of only one channel, updates the picture with a specific hue.

```html
<feColorMatrix
	type="matrix"
	values="
		1 1 1 0 0
		0 1 0 0 0
		0 0 1 0 0
		0 0 0 1 0
	"
/>
```

This is similar to `hueRotate`, but more nuanced, more subtle. And instead of relying on logic alone, it is something you have to explore and judge for yourself.

<Tint />

Tints of your journey await!
