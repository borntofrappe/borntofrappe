---
title: Fluttering with style
description: Paint with SVG and its many elements. Take a leap with CSS animations.
date: 2023-03-01T11:43:08
---

<script>
	import svg from './svg.js'
</script>

Explore SVG syntax and you are able to draw close to anything directly in a text editor. Lean on CSS and then, then you can almost learn how to fly.

To fulfill this natural premise, let's create a mascot with a country good look.

## Body

Within the context of an `<svg>` element you have access to a few helper constructs, elements such as `<rect>` and `<circle>` to draw the matching shapes with a convenient set of attributes.

Rectangles have a width and a height.

```html
<rect width="10" height="10" />
```

Circles have a radius.

```html
<circle r="5" />
```

To get started, however, draw a round-ish shape with an `<ellipse>`.

```html
<svg viewBox="-60 -60 120 120">
	<ellipse fill="#f9f5d0" rx="28" ry="25" />
</svg>
```

Creating a wider-than taller base.

{@html svg['mayo-1']}

## Legs

Let's support the body with a couple of legs. In this context, there is no element more flexible than `<path>`.

Within the boundaries of the `d` attribute you instruct the browser how to draw. Lines, curves, arcs — the sky is the limit. To ease into the syntax, begin with only straight lines.

## Legs

To support the figure with a couple of legs. In this context, there is no element more flexible than `<path>`.

Within the boundaries of the `d` attribute you instruct the browser how to draw. Lines, curves, arcs — the sky is the limit. To ease into the syntax, begin with only straight lines.

```html
<path d="M 0 0 l 0 7 l 7 7 l -5.5 -3 l -1.5 3 l -1.5 l -3 -5.5 l 3 7 -7z" />
```

Don't be deterred by the long sequence of characters. As you break down the steps, the instruction are elementary:

- start from (0, 0) — `M 0 0`

- draw a line 7 units down — `l 0 7`

- continue drawing lines per the pair of coordinates; first 7 to the right and 7 down, then 5.5 left and 3 up

- finally, close the path, linking back to the very beginning

<Commands
        x={-8}
        y={-1}
        width={16}
        height={16}
        commands="M 0 0 l 0 7 l 7 7 l -5.5 -3 l -1.5 3 l -1.5 -3 l -5.5 3 l 7 -7z" />

Conveniently, you need to specify just the first `l` character. The browser assumes the same instruction until told otherwise.

```html
<path d="M 0 0 l 0 7 7 7 -5.5 -3 -1.5 3 -1.5 -3 -5.5 3 7 -7z" />
```

Add a highly saturated fill and the stand is close to complete.

{@html svg['leg']}

We can't see the first straight line, however. Also, the sharp edges are at odds with the overall theme, they clash with the previous base. By default `<path>` elements don't have a stroke. Beef up the shape with a solid outline, and a couple of stroke-related attributes help to round up the visual.

```html
<path
	...
	fill="#fd971b"
	stroke="#fd971b"
	stroke-width="3"
	stroke-linecap="round"
	stroke-linejoin="round"
/>
```

A perfect way to match the ellipse.

{@html svg['leg-stroke']}

Of course you need two legs, and you want them tucked at the bottom of the body. To solve the first issue, define the shape in a `<defs>` element.

```html
<defs>
	<path id="leg" d="M 0 0 l 0 7 7 7..." />
</defs>
```

To then draw the visual back, refefence the `id` attribute in a `<use>` element instead.

```html
<use href="#leg" />
```

Adding a couple instances is a matter of repeating the element. Now on the left, now on the right.

<!-- prettier-ignore -->
```html
<use href="#leg" x="-12" />
<use href="#leg" x="12" />
```

Wrap the legs in a group element, then, and you are able to tackle the second problem as well.

```html
<g>
	<use href="#leg" x="-12" />
	<use href="#leg" x="12" />
</g>
```

Indeed, the group is a fitting place for common attributes — `fill`, `stroke` and the like — but also a convenient element to move the legs in the bottom half of the canvas.

```html
<g transform="translate(0 17)" fill="..." stroke="...">
	<!-- ...<use> -->
</g>
```

Add the group _before_ the ellipse, drawing the legs effectively behind, and half of the picture is already done.

{@html svg['mayo-2']}

## Head

Let's move in the opposite direction to elaborate the head. To continue the exploration of SVG syntax, introduce a `<path>` slightly off-center, to the left.

```html
<path d="M -20 0" />
```

To draw curves you have access to a couple of instructions: `q` and `c`.

Use `q` and you draw a _quadratic bezier_ curve, connecting the start and end coordinates with the help of a control point.

<ControlPoint />

Prefer `c` and you realize a _cubic bezier_ curve, linking the positions with the guidance of _two_ control points.

<ControlPoints />

Both instructions work to outline the bone structure for the bottom of the face, but the more complex syntax emulates a couple of round cheecks as well.

```html
<path
	d="
    M -20 0 
    c -18 24 58 24 40 0
    "
/>
```

In the `d` attribute curve are perhaps the most complex instructions, so let's complete the upper half with a simpler command. Wrap up the head with an arc and specifically a semicircle back to the origin.

```html
<path
	d="
    M -20 0 
    c -18 24 58 24 40 0
    a 20 20 0 0 0 -40 0
    "
/>
```

There's a plethora of numbers for the `a` character, but to draw a semicircle you can get by understanding only a few of them. The first pair describes the radius of the arc in either dimension, while last couple of numbers point to the end coordinate. Have the former exactly half as the latter and the half is complete.

In between these numbers you have three boolean values to toggle a few options. For the sake of the semicircle, you might need to change only the very last one, drawing the semicircle in a clockwise, or counter-clockwise manner.

<ClockwiseFlag />

Enough logic, however. Add a noticeable, rounded outline as with the legs.

```html
<path
	d="M ..."
	fill="#f9f5d0"
	stroke="#f9f5d0"
	stroke-width="4"
	stroke-linecap="round"
	stroke-linejoin="round"
/>
```

Move the `<path>` up in a more fitting position.

```html
<!-- ...body -->
<g transform="translate(0 -30)">
	<!-- <path> -->
</g>
```

And the composition assumes a new identity.

{@html svg['mayo-3']}

## Face

Let's add a few more details to complete the head. These are tightly coupled with the `<path>` element, so it is reasonable to have them in the same, translated group.

```html
<g transform="translate(0 -30)">
	<!-- <path> -->
	<!-- ...details -->
</g>
```

Two, dark circles for the eyes.

```html
<g fill="#542b19">
	<circle r="2.75" cx="-12" />
	<circle r="2.75" cx="12" />
</g>
```

Two `<path>`s for the beak and more evident tongue. These share a common rounded stroke.

```html
<g stroke-linecap="round" stroke-linejoin="round">
	<!-- ...<path> -->
</g>
```

But dinstinguish themselves in terms of color and the thickness of the stroke.

```html
<g fill="#fd971b" stroke="#fd971b" stroke-width="3">
	<!-- beak -->
</g>
<g fill="#fc531c" stroke="#fc531c" stroke-width="1">
	<!-- tongue -->
</g>
```

And in terms of `d` attribute, the two provide an excellent excuse to practice with cubic bezier curves.

```html
<g fill="#fd971b" stroke="#fd971b" stroke-width="3">
	<path d="M -9 8 c 6 6 12 6 18 0 -7 -5 -11 -5 -18 0" />
</g>
<g fill="#fc531c" stroke="#fc531c" stroke-width="1">
	<path d="M -6 8 c 3 4 9 4 12 0 -4 1 -8 1 -12 0" />
</g>
```

The beak is slightly thicker, the curvature is wider, completing the face of the continuously more adorable character.

{@html svg['mayo-4']}

## Wings

Wings allow to rehearse almost every concept included so far.

Create one single wing protruding to the right with a couple of tentative curves.

```html
<path d="M 0 0 c 6 -5 14 -8 20 0 -5 5 -2 10 -12 10 -2 0 -8 0 -8 -10" />
```

{@html svg['wing']

Add the now familiar and even more important stroke.

```html
<path
	d="M..."
	fill="#f0d584"
	stroke="#f0d584"
	stroke-width="8"
	stroke-linecap="round"
	stroke-linejoin="round"
/>
```

With the rounded joints, with the smooth edges the shape looks right at home.

{@html svg['wing-stroke']}

What is more, the numbers no longer seem the result of trial and error, but rather the deliberate choice of a full-fledged artist.

Similarly to the legs, define the shape in the `<defs>` block.

```html
<defs>
	<!-- leg -->
	<path id="wing" d="M 0 0 c 6 -5 14 -8 20 0 -5 5 -2 10 -12 10 -2 0 -8 0 -8 -10" />
</defs>
```

Add a couple of instances with `<use>` elements.

<!-- prettier-ignore -->
```html
<g 
	fill="#f0d584"
	stroke="#f0d584"
	stroke-width="8"
	stroke-linecap="round"
	stroke-linejoin="round">
	<!-- wings -->
</g>
```

The one on the right is good as-is, and would require only an horizontal offset.

```html
<g transform="translate(25 0)">
  <use href="#wing">
</g>
```

For the one on the left, however, we want the wing to point in the opposite direction. Instead of creating an entirely different `<path>`, the trick is to lean on SVG transformations. Scale the shape horizontally and with a negative value.

```html
<g transform="scale(-1 1)">
  <use href="#wing">
</g>
```

And the coordinate system _for the wing_ is essentially flipped. The instructions previously drawing the curve to the right compose the shape to the left.

Similarly, the offset moves the instance in away from the center.

<Transform  />

There's an added benefit to the setup. As you update the origin of the wing — the small black dot in the visual, any transformation applied on the instance takes place from the new spot.

Rotate the wing on the right and the element tips downwards.

```html
<g transform="translate(25 0)">
  <use transform="rotate(30)" href="#wing">
</g>
```

Rotate the mirror image on the left and the effect is one and the same.

```html
<g transform="scale(-1 1) translate(25 0)">
  <use transform="rotate(30)" href="#wing">
</g>
```

With the negative scale and the flipped coordinate system, you don't even need to consider a rotation in the opposite direction.

<Transform transformRotate={true} />

SVG transformations are often one of the most puzzling sections when learning SVG, and certainly one of the most difficult sections to convey. Understanding the topic, however, opens a [world of possibilities](/svg-transform).

Back to the mascot at hand. Incorporate the wings before the body, slightly above the center of the ellipse.

```html
<!-- legs -->
<g transform="translate(0 -10)">
	<!-- ...wings -->
</g>
<!-- body -->
```

Rotate the wings 90 degrees to hide them for a brief moment and the mascot is ready to spring into action.

{@html svg['majo-5']}
