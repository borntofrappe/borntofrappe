---
title: Fluttering with style
description: Paint with SVG and its many elements. Take a leap with CSS animations.
date: 2023-03-01T15:43:08
---

<script>
	import svg from './svg.js'
</script>

Explore SVG syntax and you are able to draw close to anything directly in a text editor. Lean on CSS and then, then you can almost learn how to fly.

To fulfill this natural premise, let's create a mascot with a country good look.

## SVG syntax

### Body

Within the context of an `<svg>` element you have access to a few helper constructs, elements such as `<rect>` and `<circle>` to draw the matching shapes with a convenient set of attributes.

Rectangles have a width and a height.

```html
<rect width="10" height="10" />
```

Circles have a radius.

```html
<circle r="5" />
```

To get started, however, draw a round-ish shape with an `<ellipse>`.

```html
<svg viewBox="-60 -60 120 120">
	<ellipse rx="28" ry="25" fill="#f9f5d0" />
</svg>
```

Creating a wider-than taller base.

{@html svg['mayo-1']}

### Legs

Let's support the body with a couple of legs. In this context, there is no element more flexible than `<path>`.

Within the boundaries of the `d` attribute you instruct the browser how to draw. Lines, curves, arcs — the sky is the limit. To ease into the syntax, begin with only straight lines.

```html
<path d="M 0 0 l 0 7 l 7 7 l -5.5 -3 l -1.5 3 l -1.5 l -3 -5.5 l 3 7 -7" />
```

Don't be deterred by the long sequence of characters. Break down the steps and the instruction become elementary:

- start from (0, 0) — `M 0 0`

- draw a line 7 units down — `l 0 7`

- continue drawing lines per the pair of coordinates; first 7 to the right and 7 down, then 5.5 left and 3 up

<Commands
	x={-8}
	y={-1}
	width={16}
	height={16}
	commands="M 0 0 l 0 7 l 7 7 l -5.5 -3 l -1.5 3 l -1.5 -3 l -5.5 3 l 7 -7" />

Conveniently, you need to specify just the first `l` character. The browser assumes the same instruction until told otherwise.

```html
<path d="M 0 0 l 0 7 7 7 -5.5 -3 -1.5 3 -1.5 -3 -5.5 3 7 -7" />
```

Add a highly saturated fill and the stand is close to complete.

{@html svg['leg']}

We can't see the first straight line, however. Also, the sharp edges are at odds with the overall theme, they clash with the soft base. By default `<path>` elements don't have a stroke. Beef up the shape with a solid outline, and a couple of stroke-related attributes help to round up the visual.

```html
<path
	d="M ..."
	fill="#fd971b"
	stroke="#fd971b"
	stroke-width="4"
	stroke-linecap="round"
	stroke-linejoin="round"
/>
```

A perfect way to match the ellipse.

{@html svg['leg-stroke']}

Of course you need two legs, and you want them tucked at the bottom of the body. To solve the first issue, define the shape in a `<defs>` element.

```html
<defs>
	<path id="leg" d="M 0 0 l 0 7 7 7..." />
</defs>
```

To draw the visual back, refefence the `id` attribute in a `<use>` element instead.

```html
<use href="#leg" />
```

Adding a couple instances is a matter of repeating the element. Now on the left, now on the right.

<!-- prettier-ignore -->
```html
<use href="#leg" x="-12" />
<use href="#leg" x="12" />
```

Wrap the legs in a group element, then, and you are able to tackle the second problem as well.

```html
<g>
	<use href="#leg" x="-12" />
	<use href="#leg" x="12" />
</g>
```

Indeed, the group is a fitting place for common attributes — `fill`, `stroke` and the like — but also a convenient element to move the legs in the bottom half of the canvas.

<!-- prettier-ignore -->
```html
<g 
	...
	transform="translate(0 17)" >
	<!-- ...<use> -->
</g>
```

Add the group _before_ the ellipse, drawing the legs effectively behind, and half of the picture is already done.

{@html svg['mayo-2']}

### Head

Let's create the head with a more elaborate shape. Introduce a `<path>` slightly off-center, to the left.

```html
<path d="M -20 0" />
```

To draw curves you have access to a couple of most pertinent instructions: `q` and `c`.

Use `q` and you draw a _quadratic bezier_ curve, connecting the start and end coordinates with the help of a control point.

<ControlPoint />

Prefer `c` and you realize a _cubic bezier_ curve, linking the positions with the guidance of _two_ control points.

<ControlPoints />

Both instructions work to outline the bone structure for the bottom of the face, but the more complex syntax emulates a couple of round cheecks as well.

```html
<path d="M -20 0 c -18 24 58 24 40 0" />
```

Curve are perhaps the most complex instructions, so let's complete the upper half with a simpler command. Wrap up the head with an arc and specifically a semicircle back to the origin.

```html
<path
	d="
    M -20 0 
    c -18 24 58 24 40 0
    a 20 20 0 0 0 -40 0
    "
/>
```

There's a plethora of numbers for the `a` character, but to draw a semicircle you can get by understanding only a few of them. The first pair describes the radius of the arc in either dimension, while last couple of numbers point to the end coordinate. Have the radii exactly half as the distance and the connection is complete.

In between the numbers you have three boolean values to toggle a few options. For the sake of the semicircle, you might need to change only the very last one, drawing the semicircle in a clockwise, or counter-clockwise, manner.

<ClockwiseFlag />

Enough logic, however. Add a noticeable, rounded outline as with the legs.

```html
<path
	d="M ..."
	fill="#f9f5d0"
	stroke="#f9f5d0"
	stroke-width="4"
	stroke-linecap="round"
	stroke-linejoin="round"
/>
```

Move the `<path>` up in a more fitting position.

```html
<!-- ...body -->
<g transform="translate(0 -30)">
	<!-- <path> -->
</g>
```

And the composition assumes a new identity.

{@html svg['mayo-3']}

### Face

Let's add a few more details to complete the head. These are tightly coupled with the `<path>` element, so it is reasonable to have them in the same, translated group.

```html
<g transform="translate(0 -30)">
	<!-- <path> -->
	<!-- ...details -->
</g>
```

Two, dark circles for the eyes.

```html
<g fill="#542b19">
	<circle r="2.75" cx="-12" />
	<circle r="2.75" cx="12" />
</g>
```

Two `<path>`s for the beak and more evident tongue. These share a common, rounded stroke.

```html
<g stroke-linecap="round" stroke-linejoin="round">
	<!-- ...<path> -->
</g>
```

But dinstinguish themselves in terms of color and the stroke thickness.

```html
<g fill="#fd971b" stroke="#fd971b" stroke-width="3">
	<!-- beak -->
</g>
<g fill="#fc531c" stroke="#fc531c" stroke-width="1">
	<!-- tongue -->
</g>
```

And in terms of `d` attribute, the two provide an excellent excuse to practice with cubic bezier curves.

```html
<g fill="#fd971b" stroke="#fd971b" stroke-width="3">
	<path d="M -9 0 c 6 6 12 6 18 0 -7 -5 -11 -5 -18 0" />
</g>
<g fill="#fc531c" stroke="#fc531c" stroke-width="1">
	<path d="M -6 0 c 3 4 9 4 12 0 -4 1 -8 1 -12 0" />
</g>
```

The beak is slightly thicker, the curvature is wider, adding a bit of nuance.

Place both elements slightly below the eyes.

```html
<!-- head -->
<!-- eyes -->
<g transform="translate(0 8)">
	<!-- beak and tongue -->
</g>
```

And the face of the continuously more adorable chicklet is complete.

{@html svg['mayo-4']}

### Wings

Wings allow to rehearse almost every concept included so far.

Create a single wing protruding to the right with a couple of tentative curves.

```html
<path d="M 0 0 c 6 -5 14 -8 20 0 -5 5 -2 10 -12 10 -2 0 -8 0 -8 -10" />
```

Add the now familiar and even more important stroke.

```html
<path
	d="M ..."
	fill="#f0d584"
	stroke="#f0d584"
	stroke-width="8"
	stroke-linecap="round"
	stroke-linejoin="round"
/>
```

With the rounded joints, with the smooth edges the shape looks right at home.

{@html svg['wing']}

What is more, the numbers no longer seem arbitrary, but the result of a careful design, the realization of a full-fledged artist.

Similarly to the legs, define the shape in the `<defs>` block.

```html
<defs>
	<!-- leg -->
	<path id="wing" d="M 0 0 c 6 -5 14 -8 20 0 -5 5 -2 10 -12 10 -2 0 -8 0 -8 -10" />
</defs>
```

Add a couple of instances with `<use>` elements.

<!-- prettier-ignore -->
```html
<g 
	fill="#f0d584"
	stroke="#f0d584"
	stroke-width="8"
	stroke-linecap="round"
	stroke-linejoin="round">
	<!-- wings -->
</g>
```

The one on the right is good as-is, and would require only an horizontal offset.

```html
<g transform="translate(25 0)">
  <use href="#wing">
</g>
```

For the one on the left, however, we want the wing to point in the opposite direction. Instead of creating an entirely different `<path>`, the trick is to lean on SVG transformations. Scale the shape horizontally and with a negative value.

```html
<g transform="scale(-1 1)">
  <use href="#wing">
</g>
```

And the coordinate system _for the wing_ is essentially flipped. The instructions previously drawing the curve to the right compose the shape to the left.

Similarly, the offset moves the instance westward, away from the center.

<Transform  />

There's an added benefit to the setup. As you update the origin — the small black dot in the visual — any transformation applied on the wings takes place from the new spot.

Rotate the wing on the right and the element tips downwards.

```html
<g transform="translate(25 0)">
  <use transform="rotate(30)" href="#wing">
</g>
```

Rotate the mirror image on the left and the effect is the one and the same.

```html
<g transform="scale(-1 1) translate(25 0)">
  <use transform="rotate(30)" href="#wing">
</g>
```

With the negative scale and the flipped coordinate system, you don't even need to consider a rotation in the opposite direction.

<Transform transformRotate={true} />

Transformations are likely one of the most puzzling sections when learning SVG, and certainly one of the most difficult sections to convey. Understanding the topic, however, opens [a world of possibilities](/svg-transform).

Back to the mascot at hand. Incorporate the wings before the body, slightly above the center of the ellipse.

```html
<!-- legs -->
<g transform="translate(0 -10)">
	<!-- ...wings -->
</g>
<!-- body -->
```

Rotate the elements 90 degrees to hide them for a brief moment and the mascot is ready to spring into action.

{@html svg['majo-5']}

### Crest

If there is one thing you can blame me is trying to be exceedingly symmetrical. Admittedly, I enjoy drawing most vector graphics in horizontal harmony, but there is a case for asymmetry.

Case in point, take a misshapen `<path>` element.

```html
<path d="M 0 0 c 5 0 11 -2 11 -5 0 5 2.5 5 5 3 0 5 -10 7 -16 2" />
```

Add the branded stroke to mask imperfections.

```html
<path
	d="M ..."
	fill="#f9f5d0"
	stroke="#f9f5d0"
	stroke-width="3"
	stroke-linecap="round"
	stroke-linejoin="round"
/>
```

Hide the shape behind the head, slightly off center, and the result is striking. A small touch to add flavor and a different twist to the character.

{@html svg['mayo-6']}

## CSS animations

### Blink

The mascot is unquestionably adorable, but the fixed gaze is bound to unnerve after a short while.

Consider the markup for the eyes, for instance, the right one.

```html
<circle r="2.75" cx="12" />
```

We want to scale the element, but unfortunately, it is not as simple as to change the size through the `transform` property.

```css
circle {
	transform: scale(0.5);
}
```

Rather selflishly, the issue is a chance to reiterate [a previous article](/svg-transform), but let me try to summarize the problem in a few words.

Within the bounds of an `<svg>` element, transformations are applied from an origin first described by the `viewBox`. The most solid way to update this origin is through the `transform` attribute, for instance with a translation — just as we positioned the shapes around the canvas.

```html
<g transform="translate(0 -30)">
	<!-- head -->
</g>
```

Scale the circles, and the transformation takes place from the center of the head, not the center of the specific element. To fix visual, annoying, bug, remove the `cx` attribute in favor of a previous translation.

```diff
-<circle r="2.75" cx="12" />
+<g transform="translate(12 0)">
+	<circle r="2.75" />
+</g>
```

Thankfully, that's the biggest change you'll need in terms of SVG syntax. Add a class to the now-centered eyes to be expressive.

```diff
-<circle r="2.75" />
+<circle class="blink" r="2.75" />
```

And let's finally work with CSS. A fitting animation would have the eyes disappear ever so briefly, but give enough time between iterations.

Add keyframes to rapidly scale the elements into nothing, before returning back to the initial state.

```css
@keyframes blink {
	30%,
	34% {
		transform: scaleY(0);
	}
	28%,
	32%,
	36% {
		transform: scaleY(1);
	}
}
```

Targeting only the y axis should work to give the impression of the eyes actually closing.

Through the class selector, then, refer to the animation with your favorite easing.

```css
.blink {
	animation: blink 5s cubic-bezier(0.37, 0, 0.63, 1) infinite;
}
```

The succession of keyframes makes the decision less than decisive, but there's always a place for a sine function.

<Mayo animations={[]} />

### Jump

Moving on to more impressive changes, the goal is to move the mascot down as if flexing its muscles and then up in a small, but evident leap.

Wrap the wings, body and head in a common group element for the translation. Not the legs as you want to give the impression of the animal approaching the ground.

```html
<!-- legs -->
<g class="jump">
	<!-- wings -->
	<!-- body -->
	<!-- head -->
</g>
```

Define the animation to implement the desired motion.

```css
@keyframes jump {
	0%,
	45% {
		transform: translateY(0px);
	}
	55% {
		transform: translateY(5px);
	}
	70%,
	90% {
		transform: translateY(-2px);
	}
	95% {
		transform: translateY(1px);
	}
	100% {
		transform: translateY(0px);
	}
}
```

Refer to the animation through the respective class.

```css
.jump {
	animation: jump 5s cubic-bezier(0.37, 0, 0.63, 1) infinite;
}
```

You are free to explore different durations and easing curves, but the same values chosen for the eyes work to create the incrementally impressive effect.

<Mayo animations={["jump"]} />

### Flap

To complete the visual let's finally work on the wings. These are already structured so that rotation takes place from their respective origin, meaning you need just the class selector.

```css
<use class="flap" href="#wing" />
```

To animate the pair.

```css
.flap {
	animation: flap 5s cubic-bezier(0.37, 0, 0.63, 1) infinite;
}
```

By repeating the duration of the previous animation we are able to follow the logic of the jump.

Frame the element to preserve the initial, tucked-in rotation. Up until the leap is about to occur.

```css
@keyframes flap {
	0%,
	60% {
		transform: rotate(90deg);
	}
}
```

And then have fun adding as many flaps as you can possibly tolerate.

```css
@keyframes flap {
	0%,
	60%,
	70%,
	80%,
	95%,
	100% {
		transform: rotate(90deg);
	}
	65%,
	75%,
	85% {
		transform: rotate(0deg);
	}
}
```

Ready to be impressed?

<Mayo animations={["jump", "flap"]} />

## Finishing touches

Do not worry, the animation is done, and the article is close to being over.

What is left is reaping the rewards of such a long, laborious journey. What is left is up to your imagination and your sense of whimsy. Shorten the duration, experiment with a different bezier curve, be it in a `<path>` element or through the `animation-timing-function` property.

Personally, I decided to indulge in one additional animation. This one traces the jump to have the entire mascot, legs included, move just a smidge upwards and then down as the chicklet hits the ground. You'll be the judge if the small bounce was worth the effort.

<Mayo />
