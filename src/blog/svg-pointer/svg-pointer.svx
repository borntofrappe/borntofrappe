---
title: SVG pointer
description: Explore two ways to find the right spot in SVG.
date: 2024-01-31T14:07:58
---

<script>
	import BoundingClientRect from './BoundingClientRect.svelte';
	import PointMatrix from './PointMatrix.svelte';
	import ColorfulLines from './ColorfulLines.svelte';
</script>

The `svg` element introduces a powerful context, a scope in which you are able to draw an array of shapes and innumerable, colorful drawings.

```html
<svg viewBox="0 0 100 100">
	<!-- ... -->
</svg>
```

You might be familiar with the possible elements nested between the two tags, like `circle`. And a quick look in the specification leads you to a visual setting a few attributes — `r` for the radius, `cx` and `cy` for the position of the center.

```html
<circle r="2" cx="1" cy="1" />
```

As soon as the browser parses the document you are greeted with the simple shape. But it may so happen that you want to draw said shape on demand, following user interaction.

Consider the interaction following a click of the mouse, or a tap of a finger. You can respond to the occasion with events such as `pointerdown`.

```js
const element = document.querySelector('svg');

element.addEventListener('pointerdown', handlePointer);
```

But you need a few lines of code to find the right spot.

## Coordinates

In the callback function for the chosen event you gain access to the `Event` object, and among the properties, to coordinates such as `clientX` and `clientY`.

```js
function handlePointer(event) {
	const { clientX, clientY } = event;
}
```

The issue: these coordinates describe an x, y point on the page. They cannot be used in the `svg` element and the boundaries set with the `viewBox` attribute. Or at least, not if you want to draw in the visible area.

You need to convert the values, and for this, there are at least two ways. It is likely there is a winner between the two, and even a third choice topping both, but both work to achieve our goal.

## BoundingClientRect

`clientX` and `clientY` are relative to the page and to the SVG element laid on this page, so you need to consider the position and the dimensions of the element itself. You can do this with the `getBoundingClientRect` method.

```js
const bCR = element.getBoundingClientRect();
```

Invoke the function on the element and the result is an object with several properties, among which: `x`, `y`, `width` and `height`. With this information you can adapt the coordinates retrieved from the event.

For example, and for the horizontal coordinate. First, you want to identify the position relative to the start, to the left side. For this subtract the potential offset of the element in the DOM.

```js
const x = clientX - bCR.x;
```

With the value divide the measure by the width of the node.

```js
const x = (clientX - bCR.x) / bCR.width;
```

In doing so, you find a number in the 0-1 range. This is a rather convenient range when you know one more thing: the dimensions of the canvas set through the `viewBox`.

This is the last step, and possibly the one making you doubt the solution.

```js
const x = ((clientX - bCR.x) / bCR.width) * 100;
```

Multiply the decimal by the hard-coded width and you find the correct coordinate, in the context of the `svg` element.

Repeat the process for the vertical offset, with the height of the element and of the canvas and you have found it, a first way.

<div class="[ center-frame ]">
	<BoundingClientRect />
</div>

You need to adapt the number to the `viewBox`. In this instance, it was a simple matter of multiplying the value by the width, by the height, but the process can be even more complex. If you were to change the origin of the canvas with the first two arguments, you'd need to account for these offsets as well.

But even if roundabout, the code works.

## Point matrix

You need to convert the page coordinates to the coordinate system of the `svg` element. The process involves matrices, and while you won't have to do the math yourself, knowing the fact will help you understand the approach a tad more.

On one side, [the SVG specification](https://svgwg.org/svg2-draft/types.html#InterfaceSVGGraphicsElement) tips you to the `getScreenCTM` method.

```js
const matrix = element.getScreenCTM();
```

When you call the function on the element you are able to move from the SVG transform matrix to the one relevant to the screen. The result is an instance of `DOMMatrix`, but to your keen eyes, the result is also not what we want.

We don't want to move from the `viewbox` to the screen, but the other way round. From "world" coordinates to the system in use within the element. Luckily, you can invert the matrix with the `inverse` method.

```js
const matrix = element.getScreenCTM().inverse();
```

You have the matrix, and to avoid doing the math yourself, you have a way to move from one set of coordinates to the other within [a CSS module](https://www.w3.org/TR/geometry-1/#DOMPoint). Specifically, with an instance of `DOMPoint`. Create a point with the `new` keyword, using the client values as arguments.

```js
const point = new DOMPoint(clientX, clientY);
```

And through the point, make use of the matrix with the `matrixTransform` function.

```js
const svgPoint = point.matrixTransform(matrix);
const { x, y } = svgPoint;
```

The method returns an object with the desired coordinates, and admittedly, concludes a rather involved process. You need to explore multiple specifications, methods and classes. But if you manage to wrap your head around the sequence you are finally able to move from screen to `viewBox`, through the transform matrix.

<div class="[ center-frame ]">
	<PointMatrix />
</div>

This time, you can update the `viewBox` and its four composing numbers any which way. `getScreenCTM` will do the job for you to find the right numbers.

But this time, you might have also grown tired, and weighed by a more existential question. _"Can't I just use a `canvas` element to draw dots?"_. The Canvas API offers an alternative — and possibly a more performant alternative as well —, but there are features, a few special effects, for which you'll gladly know how to use vectors.

And even a sparse room, inspired by [a colorful title](https://chicorygame.com/), will convince you of that.

<div class="[ center-frame ]" data-size="medium">
	<ColorfulLines />
</div>
