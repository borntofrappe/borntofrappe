---
title: Shadow drops
description: Sneak in a few drops of paint to style elements in separate trees.
date: 2024-04-19T10:20:35
---

<script>
	import './roses.js';
</script>

The most obscure of [the three technologies](/building-web-blocks) behind web components, the Shadow DOM allows you to encapsulate code in a different document structure. The separation is particularly refreshing in terms of styles: CSS properties stated in the nested markup don't escape the new scope, while key-value pairs in the light DOM do not, regularly, sneak in.

In the CSS standard you also find a host of provisions for [more advanced styling](/pseudo-control), in the form of dedicated pseudo classes and elements. And one in particular deserves an addendum. Not to mention a small example.

Starting from virgin soil, consider a custom element extending the generic `HTMLElement` interface.

```js
class ShadowRose extends HTMLElement {
	constructor() {
		super();
	}
}
```

In the constructor function we enter the shadows with the `attachShadow` function, and sprinkle a small vector graphic in the dark DOM.

```js
const shadowRoot = this.attachShadow({ mode: 'open' });
shadowRoot.innerHTML = `
<svg viewBox="-25 -51 50 90">
	<g fill="hsl(0 0% 98%)" stroke="hsl(0 0% 98%)">
		<!-- ... -->
	</g>
</svg>`;
```

I'll spare you the details of the actual drawing, but look at the group element for a moment. Here I set the `fill` and `stroke` attributes to a nearly white color. This means that the nested shapes are painted with the bright pick.

Once you define the custom element.

```js
customElements.define('shadow-rose', ShadowRose);
```

Adding the matching tag in plain markup is enough to grow the first graphic.

<white-rose></white-rose>

If you want to paint the shapes with a different color, you have the option to expose the group with the `part` attribute.

```html
<g part="rose" fill="hsl(0 0% 98%)" stroke="hsl(0 0% 98%)">
	<!-- ... -->
</g>
```

Assign a label, similarly to a class, and from the outside the `::part` pseudo element is able to target the node and update the properties.

```css
::part(rose) {
	fill: hsl(1 93% 58%);
	stroke: hsl(1 93% 58%);
}
```

With the syntax you are therefore able to paint from the light DOM, and in bright red.

<shadow-rose></shadow-rose>

This is the essence of [CSS shadow parts](https://drafts.csswg.org/css-shadow-parts/), but admittedly, doesn't tell the full story.

Say you create another custom element, itself with a shadow root.

```js
class ShadowBouquet extends HTMLElement {
	constructor() {
		super();
		const shadowRoot = this.attachShadow({ mode: 'open' });
	}
}
```

If you were to mark up the element with one, two, or even three copies of the first custom element, you could wrap the graphic in a cute composition.

```js
shadowRoot.innerHTML = `
<shadow-rose></shadow-rose>
<shadow-rose></shadow-rose>
<shadow-rose></shadow-rose>
`;
```

But this time, you would also lose the red color. This is because the combination of `part` attribute and `::part` pseudo element is not enough to surface the markup with _nested_ shadows.

If you want to expose the node, you have to be explicit, to formally declare your intention with the `exportparts` attribute.

```js
shadowRoot.innerHTML = `
<shadow-rose></shadow-rose>
<shadow-rose exportparts="rose"></shadow-rose>
<shadow-rose></shadow-rose>
`;
```

Adding the string on a custom element works, giving you one more way to walk through the trees and style the shadows. Even nested ones, where light barely shines.

<shadow-bouquet></shadow-bouquet>

Of course, light does shine between the documents in at least [two manners](/what-shines-through).

The first is with _inherited properties_, such as `font-family` and, thankfully, `color`. In the context of SVG you cherish this option through the ever flexible value of `currentColor`.

```html
<g fill="currentColor" stroke="currentColor">
	<!-- ... -->
</g>
```

Set the fill, set the stroke to respect the value and you can even spare the elaborate, multi-part scheme. The shapes will be painted with the color of the closest parent element.

```css
body {
	color: hsl(1 93% 58%);
}
```

The second manner is with _custom properties_. These are designed to pierce through the Shadow DOM, so that in the group you can refer to the value held by the property.

```html
<g fill="var(--color-rose)" stroke="var(--color-rose)">
	<!-- ... -->
</g>
```

And even provide a fallback, which will take its place should somebody forget to set the property.

```html
<g fill="var(--color-rose, hsl(0 0% 98%))" stroke="var(--color-rose, hsl(0 0% 98%))">
	<!-- ... -->
</g>
```

Should _somebody_ forget the preferred color.

<style>
	::part(rose) {
		fill: hsl(1 93% 58%);
		stroke: hsl(1 93% 58%);
	}
</style>
