---
title: Lifecycle call
description: Single out the lifecycle functions coexisting in a custom element.
date: 2024-03-22T22:13:14
---

<script>
	import Spirits from './Spirits.svelte';
</script>

The specification for [custom elements](https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements) logs a series of _lifecycle callbacks_, functions which run at specific points in the element's existence. These are only a handful, and important enough to warrant a quick repetition.

## `constructor`

_The element is created._

While technically not a callback, the function is your first stop to initialize the node.

For the sake of argument, if you were to fabricate a custom element with a valid, hyphenated name.

```html
<hey-listen></hey-listen>
```

It is in the constructor function that you can inherit the feature of a class such as `HTMLElement`.

```js
class HeyListen extends HTMLElement {
	constructor() {
		super();
	}
}
```

And it is always in the constructor where you can structure the content with proper markup. Perhaps even through [the shadow DOM](shadows-attached).

```js
const shadowRoot = this.attachShadow({ mode: 'open' });
shadowRoot.innerHTML = ``;
```

## `connectedCallback`

_The element is inserted in the DOM._

As the element finds its place in the larger document, the function is the best place to complete the component in terms of functionality. Here you tend to listen to particular events, and perhaps interact with the APIs available on the web.

```js
connectedCallback() {
	this.interval = setInterval(() => {
		// something mildly annoying
	}, 2000);
}
```

## `disconnectedCallback`

_The element is removed from the DOM._

On the opposite end of `connectedCallback`, the function is a good place to clean up the code, removing event listeners and those pesky operations persisting in the DOM.

```js
disconnectedCallback() {
	clearInterval(this.interval);
}
```

## `attributeChangedCallback`

_An attribute changes._ Or, to be precise, _an observed attribute changes._

Just like regular HTML nodes, custom elements benefit from key-value pairs in the opening tag.

```html
<hey-listen spirit="courage"></hey-listen>
```

Should you update, add or remove an attribute.

```js
const heyListen = document.querySelector('hey-listen');
heyListen.setAttribute('spirit', 'wisdom');
```

You can thank the function to detect the change.

```js
attributeChangedCallback(name, oldValue, newValue) {
	// do something and keep going
}
```

As long as you set up the custom element to keep a watchful eye on the attribute through a getter function, `observedAttributes`.

```js
static get observedAttributes() {
	return ['spirit'];
}
```

[Keeping attributes up-to-date](/up-to-date-attributes) is slightly more complicated, but when you want to synchronize the values between element and class, it is more than worth learning.

## `adoptedCallback`

_The element is moved to a new document._

Through the `document` global, the `adoptNode` function lets you move an element between documents. The operation is fairly confounding, might involve an `iframe`, and for the life of me, still lacks a use-case.

You can rest assured, however, even without the specific mention, there's plenty you can achieve with the existing functions.

<Spirits />
