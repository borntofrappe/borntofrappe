---
title: Building web blocks
description: An introduction to web components with round figures.
date: 2024-03-06T17:51:46
---

<script>
	import svg from './svg.js';
	import CustomCounter from './CustomCounter.svelte';
</script>

When you approach web components the sheer volume of material can be overwhelming. Behind the one term there are two specifications and three core technologies, coming together to forge any widget a web developer may need. To ease in the topic, however, it is possible to focus on the three key ingredients one at a time.

<figure class="center-frame">
	{@html svg['pan']}
</figure>

Indeed, while the technologies are often bundled together in more complex components, they are also independent of one another, and each has its own reason for being.

{@html svg['defs']}

## Custom elements

Explained in the [HTML Living standard](https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements), custom elements describe elements you create yourself. You add them with tags and a name, made of multiple, hyphenated words.

```html
<secret-message></secret-message>
```

You need more than one word to separate the helper structures from standard DOM nodes.

On its own the code achieves little but creating a generic container, and it is with JavaScript that you build up the feature. Starting with a class extending an `HTMLElement`.

```js
class SecretMessage extends HTMLElement {
	constructor() {
		super();
	}
}
```

It is convenient to repeat the label used for the element in camel case, if only to save the hassle of finding a new name.

In the `constructor` method, invoking `super` makes it possible to extend the features built in the element itself, validating the node. In this same scope, you can update the element any way you may choose. You can, for instance, inject markup through the `innerHTML` property.

```js
super();
this.innerHTML = '<p>Surprise surprise</p>';
```

The class exists, but you need to create a connection with the specific element. And for this, the `customElement` interface offers the `define` function.

```js
customElements.define('secret-message', SecretMessage);
```

In the first argument point to the custom element, by name, and in the second refer to the class.

Have the script run, and you are sure to find the paragraph on the page. Inspect the document, and sure enough, you'll be happy to find evidence of the element's custom nature.

<figure class="center-frame" data-size="medium">
	{@html svg['inspector-element']}
</figure>

## Shadow DOM

Moving into the [DOM living standard](https://dom.spec.whatwg.org/#interface-shadowroot), the shadow DOM describes a way to encapsulate code, to separate structure, style and function. The term shadow is set to oppose the regular DOM, which you may label as _light DOM_, and you can witness its influence with another small script. The effort is rather self-serving, but works to illustrate the point.

Add a `div` container on the page.

```html
<div></div>
```

With JavaScript, you can target the node and "enter" the shadow DOM by _attaching_ a root with the `attachShadow` function.

```js
const div = document.querySelector('div');
const shadowRoot = div.attachShadow({ mode: 'open' });
```

The function itself requires an argument, an object with a property of `mode`, but without going into details about the two available options, `"open"` and `"closed"`, focus on the returned value, on the shadow root.

You can update this root with markup and the same property available on HTML elements, `innerHTML`.

```js
shadowRoot.innerHTML = `<p>From the darkness</p>`;
```

The text will be displayed still, but inspect the page, and you'll see that the content is nested in an additional level, in the promised shadow DOM.

<figure class="center-frame" data-size="medium">
	{@html svg['inspector-shadow']}
</figure>

The markup is encapsulated. Should you style the elements in the root, even with more general CSS selectors.

```js
shadowRoot.innerHTML = `<style>
    p {
        color: red;
    }
</style>
<p>Total encapsulation</p>`;
```

You'll see that the code affects only the nodes in the same scope, and not the rest of the page. In truth, some properties are inherited, and there are ways to further customize the elements from outside, but this is in essence the shadow DOM, a way to create a clean cut.

## HTML templates

Back in the [HTML specification](https://html.spec.whatwg.org/multipage/scripting.html#the-template-element), the `template` element lets you author some markup for later use.

```html
<template>
	<!-- ... -->
</template>
```

Consider a card, highlighting holidays in title and date with a heading and precious `time` element.

```html
<article>
	<h1></h1>
	<time></time>
</article>
```

Add the code between the opening and closing `template` tags and you've built your first template. On screen you won't see a trace of the markup, but inspecting the source you will find the template and a nested `#document-fragment`.

<figure class="center-frame" data-size="medium">
	{@html svg['inspector-template']}
</figure>

The content will be rendered, but only as required, only with JavaScript. And while the process is slightly involved, it quickly solves the templating function.

In a script isolate the `template` and create a clone of the element's `content`. You do this with the `cloneNode` function.

```js
const template = document.querySelector('template');
const content = template.content.cloneNode(true);
```

The step is essential for a simple reason, but to complete the task at hand, focus on the cloned content. The input argument, `true`, makes it possible to create a deep copy, so that you have a reference to the entire markup housed in the template. And through the reference, you have the option to update the nodes and highlight an upcoming festivity.

```js
const heading = content.querySelector('h1');
const time = content.querySelector('time');

heading.textContent = 'Easter';
time.textContent = '31s March';
time.setAttribute('datetime', '2024-03-31');
```

Without turning this into an article on semantic HTML, you author the markup and finally, append the element in a visible place.

```js
document.body.appendChild(content);
```

On the page you'll see the result. And should you inspect the DOM, you'll still see the template` and the nested content, waiting to be used once again.

This last fact helps to justify the rather cryptic line cloning the content. What happens if instead of resorting to the `cloneNode` function you instead refer to the content as is?

```diff
-const content = template.content.cloneNode(true);
+const content = template.content
```

In the specific example the result is the same. The holiday is displayed in name and instant. The template, however, has lost its reusable function. If you analyze the DOM tree, one last time, you can attest yourself that the element is ineed spoiled of the nested markup.

<figure class="center-frame" data-size="medium">
	{@html svg['inspector-template-empty']}
</figure>

If you want to use and reuse a template, you have to clone the content for good. But, if you are so opposed to `cloneNode`, you have an alternative in the `document`, and the `importNode` function instead.

```diff
- const content = template.content.cloneNode(true);
+ const content = document.importNode(template.content, true);
```

The two achieve the same exact goal, to have a copy of the content and preserve the original. A template, after all, is a template, meant to be used again and again.

Of note, and similarly to the code introduced for the shadow DOM, you can have a `<style>` tag in the scope of a template as well.

```html
<template>
	<style>
		span {
			color: red;
		}
	</style>
	<!-- ... -->
</template>
```

This time, however, the key-value pairs affect other elements, bringing the topic full circle. There are three technologies, separate from each other, with their own function, but working together to build full-fledged components. Components which follow a convenient template, are safely styled through the inscrutable shadow DOM and come with their own tag.

```html
<custom-counter></custom-counter>
```

Just waiting to be of use.

<CustomCounter />
