---
title: How many paths to draw a line?
description: Find the answer for an evocative silhouette, animated with SMIL, examined with Javascript.
date: 2023-03-20 21:47:38
---

<script>
    import Center from '$lib/components/blog/Center.svelte';

    import svg from './svg.js';
    import AnimateScale from './AnimateScale.svelte';
    import AnimateD from './AnimateD.svelte';
    import AnimateSilhouette from './AnimateSilhouette.svelte';
    import ControlSilhouette from './ControlSilhouette.svelte';
</script>

With the unfolding of [the pleasant season](/self-reference-in-nature) I spotted a series of floating features at the entrance of a few shops, on the windows of a few houses. Pinwheels, wind chimes, and a most delightful cardboard cutout spiraling with the gentlest breeze. A cutout similar to the following vector graphic.

<Center element="figure" maxInlineSize="26rem">
	{@html svg['silhouette']}
</Center>

The visual itself is already effective to describe the static piece of craft, but with SMIL animation we can go further and emulate the approaching wind. With JavaScript, then, we can go deeper and study SVG syntax in excessive detail.

## Animation

Focus on the bottom section, on the puffy tail bound to rotate with the wind.

<Center element="figure" maxInlineSize="20rem">
	{@html svg['tail']}
</Center>

There's just one element behind the visual. One `<path>` with a handful of curves.

```html
<path
	d="
    M 0 0 
    c -4 5 -3 12 0 15 
    c 5 5 10 15 -4 15 
    c 2 -5 5 -10 0 -15 
    c -4 -5 -4 -10 4 -15
    "
/>
```

We want the shape to rotate around the y axis, but alas, there is [no perspective in SVG](what-are-the-odds).

You can pretend to rotate the path by changing the horizontal scale.

```html
<path transform="scale(0.5 1)" d="..." />
```

And with CSS you can even animate the value between 1 and -1.

```css
path {
	animation: float 2s infinite;
	transform: scale(1, 1);
}

@keyframes float {
	50% {
		transform: scale(-1, 1);
	}
}
```

But the result makes for a rather lackluster workaround.

<Center maxInlineSize="20rem">
	<AnimateScale />
</Center>

As the scale reaches zero the path disappears and then grows back on the opposite side. What we want, however, is to maintain the visual, the path through the entire sequence.

Enters SMIL animation.

If we come up with the `d` attribute for the start and end state, making sure to use the same number of points.

```text
"M 0 0 c -4 5 -3 12 0 15 c 5 5 10 15 -4 15 c 2 -5 5 -10 0 -15 c -4 -5 -4 -10 4 -15"
"M 0 0 c 4 5 3 12 0 15 c -5 5 -10 15 4 15 c -2 -5 -5 -10 0 -15 c 4 -5 4 -10 -4 -15"
```

The `<animate>` element interpolates between the two curves in a much more impressive manner.

<Center maxInlineSize="20rem">
	<AnimateD />
</Center>

For the remarkable result you need to leave the path open and tuck the `<animate>` element right within.

```html
<path d="M 0 0 c -4 5 -3 12 0 15 ...">
	<animate attributeName="d" />
</path>
```

Between the attributes, then, specify the duration and the values, leaning on the two strings.

```html
<animate
	attributeName="d"
	dur="2s"
	values="
        M 0 0 c -4 5 -3 12 0 15...;
        M 0 0 c 4 5 3 12 0 15;
        M 0 0 c -4 5 -3 12 0 15...;
    "
/>
```

There are actually three strings so that the animation moves temporarily to the second value and then goes back to the initial instruction. Seamless. And job essentially done.

<Center maxInlineSize="26rem">
	<AnimateSilhouette />
</Center>

You can experiment with different timing functions through the `keySplines` and `calcMode` attributes. You can animate the entire silhouette to softly move as well. I'll let you explore these routes at your leisure, however, and consider a different road.

## Lines

Say you are delighted with the SMIL animation, but would like to know more about the `d` attribute. Say you want to display one specific version of the tail in between the two, interpolated values, or you are now intrigued by the now puzzling question: just how many versions are there?

The answer is hidden in the `<path>` element, but you won't find it by inspecting the DOM tree. Run the animation and the node keeps displaying the hard-coded string.

```html
<path d="M 0 0 c -4 5 -3 12 0 15 ...">
	<!-- ...animate -->
</path>
```

This is perhaps expected. And certainly more expected than finding a solution with CSS.

There is no `d` property.

```css
/* no such thing! */
path {
	d: 'M 0 0 h 20';
}
```

But the value for the `d` attribute, the real value, is exposed with CSS properties through the `getComputedStyle` method.

```js
const path = document.querySelector('path');
getComputedStyle(path)['d'];
/*
'path("M 0 0 C -4 5 -3 12 0 15 C 5 20 10 30 -4 30 C -2 25 1 20 -4 15 C -8 10 -8 5 0 0")'
*/
```

With this in mind, what you need to do is to let the animation run. And, repeat the instruction in the developer tools. Without delay.

Kidding aside, the suggestion does help to validate the concept â€” here's one of the values I found while testing the code.

```text
'path("M 0 0 C 3.71653 5 2.7874 12 0 15 C -4.64566 20 -9.29132 30 3.71653 30 C 1.85826 25 -0.929132 20 3.71653 15 C 7.43306 10 7.43306 5 0 0")'
```

To find _all_ the possible paths, however, focus on the `<animate>` element.

```js
const animate = path.querySelector('animate');
```

As the animation unfolds, you are able to listen to different events. When the animation starts.

```js
animate.addEventListener('beginEvent', () => {
	// now it begins...
});
```

When the same ends.

```js
animate.addEventListener('endEvent', () => {
	// ...sweet closure
});
```

What you then need is to save the `d` attribute between the two instants.

Personally, I resolved to use `requestAnimationFrame`, calling a helper function over and over.

```js
let animation = null;
const paths = [];

const getPath = () => {
	paths.push(getComputedStyle(path)['d']);
	animation = requestAnimationFrame(getPath);
};
```

Start the recording process as the animation begins.

```js
animate.addEventListener('beginEvent', () => {
	getPath();
});
```

And stop the looping directive when no longer needed.

```js
animate.addEventListener('endEvent', () => {
	cancelAnimationFrame(animation);
});
```

Direct the `<animate>` over the span of 1 second, and you'll finally find an array filled with strings. Roughly 60 of them.

You can take my word for it. Or, consider the initial visual one last time. Now with a touch of interaction.

<Center element="figure" maxInlineSize="26rem">
	<ControlSilhouette />
</Center>

Inspect the DOM tree and you will see the attribute does change. After all, I did register all possible paths.
