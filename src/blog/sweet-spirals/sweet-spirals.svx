---
title: Sweet spirals
description: Treat yourself drawing spirals with arcs or variable, polar, coordinates.
date: 2023-08-15T15:33:31
---

<script>
	import Center from '$lib/components/blog/Center.svelte';

	import svg from './svg.js';
	import JavaScript from './JavaScript.svelte';
	import Zdog from './Zdog.svelte';
	import Treats from './Treats.svelte';
</script>

To draw a spiral in SVG the `<path>` element opens a way with the [often mysterious](/character-arc) arc command and the _"A"_ character.

```html
<path d="M 0 0 a 2 2 0 0 0 4 0 a 4 4 0 0 0 -8 0 a 6 6 0 0 0 12 0" />
```

Starting from a specific point, draw a semicircle in one direction, reverse the trend while doubling the length of the arc. Repeat the exercise and as you connect the points with the ever expanding shape, you compose a first, rough, but convincing sketch.

<Center element="figure" maxInlineSize="400px">
	{@html svg['spiral']}
</Center>

The result is solid, but with the assistance of JavaScript we can go further. The logic relies on _polar coordinates_, a concept you might have put already to use to draw a circle as a series of connected points. In a few words, you have an angle and a given offset.

```js
let angle = 0;
let r = 10;
```

Increase the angle and compute the x, y coordinates with two specific trigonometric functions.

```js
const x = Math.cos(angle) * r;
const y = Math.sin(angle) * r;
```

Just remember that cosine and sine work with radians, and not degrees. With this in mind you can increase the angle with a whole integer and convert the measure to the fitting 0 to PI\*2 range. Or, change the value with a much smaller increment.

```js
for (let i = 0; i < length; i++) {
	angle += 0.15;
	// ...x & y
}
```

Either way, as you increase the angle you "walk" around the center and find the position of a few points, scattered on the outline of a perfect circle.

For a spiral, the trick is simple enough to digest. Instead of a fixed offset, have the radius increase as well.

```js
let angle = 0;
let r = 0;

for (let i = 0; i < length; i++) {
	angle += 0.15;
	r += 0.1;
	// ...x & y
}
```

Starting from 0, the first point sits in the very center. Every successive dot is pushed further and further away. Away and around the shared origin. Connect the values and gradually you have it, another spiral.

<Center maxInlineSize="400px">
	<JavaScript />
</Center>

The feature is quite notable, but as the spiral keeps growing, as the distance between the points increases, you do notice an issue. You don't really have a series of curves, but a sequence of straight segments, linked to one another.

The point stands: increase the angle _and_ the radius to find the coordinates of a spiral. A spiral you can draw with canvas or SVG, in two dimensions. With the blessing of JavaScript, however, you can take the concept really further, and in higher dimensions.

Libraries like [Zdog](https://zzz.dog/) help to draw shapes on a third axis. For our neat spiral, this means you are able to explore a higher dimension.

Increase the angle to rotate around the center. Increase the radius to expand in regular turns. Increase the `z` coordinate to change the depth.

Rotate the graphic around [the available axes](/rotate-3d) and the spiral is realized in a flowing, swirling figure.

<Center maxInlineSize="400px">
	<Zdog />
</Center>

Be it with SVG, JavaScript, JavaScript and friends you have the ingredients to craft a few shapes. You have a way to whip up more complex, sweet figures.

<Center maxInlineSize="400px">
	<Treats />
</Center>
