---
title: Stroke of chance
description: Orchestrate an outline with SVG filters or a solid stroke.
date: 2023-09-13T10:34:40
---

<script>
	import Center from '$lib/components/blog/Center.svelte';

	import html from './html.js';
	import Squiggle from './Squiggle.svelte';
</script>

SVG filters allow to change the default appearance of other elements. Through a set of primitives, a sequence of inputs and outputs you can introduce [noise functions](/filter-art), [lighting effects](/filter-light), and much, much more.

The topic is vast, and opens the door to exotic changes. But also, practical touches.

Consider an outline, around a bright `<text>` element.

```html
<text filter="url(#outline)" fill="hsl(0 0% 99%)">
	<!-- ... -->
</text>
```

## A sequence

As prefaced, you build a filter with primitives, a chain of inputs and outputs.

```html
<filter id="outline">
	<!-- ... -->
</filter>
```

Each primitive has a function, a way to modify the input graphic. To create an outline, for instance, you need to first expand the picture, dilate the image beyond the existing boundaries. `feMorphology`, with the `operator` attribute set to `dilate` helps you to achieve just that.

```html
<feMorphology operator="dilate" radius="1" />
```

The `radius` attribute argues for the size of the expansion. But without diving into the often puzzling world of [units in the `filter` element](/units-in-conflict), know that the value is not relative to the size of the text. In this manner, the growth is uniform, across the entirety of the wider-than-taller figure. The actual number, here, is up to your preference.

<Center element="figure" maxInlineSize="24rem">
	{@html html['fe-morphology']}
</Center>

We care solely of the excess, the part stretching past the input string and for this, we have access to `feComposition`. The primitive takes two inputs with the `in` and `in2` attributes. On top of these values, it considers an `operator`, which details the type of composition. The value of `out`, in this instance, suits our needs best.

```html
<feComposite in2="SourceGraphic" operator="out" />
```

In goes the result of the previous primitive, the implicit value assumed by the `in` attribute. In goes the source graphic, explicitly mentioned through the value of `SourceGraphic`. With the chosen operator the function takes the parts of the first shape which do **not** overlap with the second. You end up carving the stroke, and you are almost done.

<Center element="figure" maxInlineSize="24rem">
	{@html html['fe-composite-out']}
</Center>

Not quite done however. You do have a stroke, but a stroke only, with the color of the input graphic as well.

For the color, the stroke needs enough contrast to stand out. You certainly wouldn't want to find an indistinguishable mass. Again.

And you can trust another primitive to set the base.

```html
<feFlood flood-color="hsl(0 0% 25%)" />
```

`feFlood`, with a given `flood-color`, looks deceptively simple. In its effect, then, it is also straightforward.

<Center element="figure" maxInlineSize="24rem">
	{@html html['fe-flood']}
</Center>

The primitive works to paint with the color, over the entirety of the rectangular area containing the input text. On its own, the element does little but obscure your view, but as part another element, the function is exactly what you need.

Remember `feComposition`? With the `out` operator we considered the parts of one input exceeding those of the other. With the `in` operator we can achieve the opposite, and consider the overlapping portions only. We do need to be more explicit, however.

With one input attribute we can point to the output of the previous primitive, `feFlood`, but for the partner input we need a reference.

Promptly, you can name the output of every primitive with the `result` attribute.

```html
<feComposite result="stroke" in2="SourceGraphic" operator="out" />
<feFlood result="color" flood-color="hsl(0 0% 25%)" />
```

Name the result of the carving operation as `stroke`. For good measure, mark the result of the flooding function as `color` and you have them, the necessary ingredients for the new element.

```html
<feComposite in="color" in2="stroke" operator="in" />
```

In goes the color-flooded rectangle, in goes the stroke. The result, a preciously tinted image.

<Center element="figure" maxInlineSize="24rem">
	{@html html['fe-composite-in']}
</Center>

There's only one last step missing. In the context of the source graphic, we still have the stroke only. Colored as it might be, there's nothing between the lines. We need to bring the text back. An operation made possible by `feMerge`.

```html
<feMerge>
	<feMergeNode />
	<feMergeNode in="SourceGraphic" />
</feMerge>
```

Each instance of `feMergeNode` points to a layer. Here the result of the last composition, as the preceding primitive , and once again the original, unfiltered graphic. Finalizing the outline filter.

<Center element="figure" maxInlineSize="24rem">
	{@html html['outline-filter']}
</Center>

There is a slight problem with the result. If you pay close attention to the letter forms, if you focus on the actual stroke, you might notice that the outline is irregular, at times choppy.

Was this work all for nought? Certainly not. Immediately, the process makes you appreciate filters and rehearse the flow of the nested primitives. On top of this, you know how to add an outline around a text element, but the operation is possible on any other shape, be it a `<circle>`, a `<rect>`angle, or a convoluted `<path>`. And the list is not limited to SVG elements. You can very well apply the filter to HTML elements as well.

{@html html['outline-html']}

We achieved a lot even with the imperfect result. But if you stick to the body of the `<svg>` element, and long for a smoother effect, there are alternatives, even simple ones.

## An alternative

Let's go back to the `<text>` node with a given color.

```html
<text fill="hsl(0 0% 99%)">
	<!-- ... -->
</text>
```

Past the `fill`, you can set a color for the stroke and a width with another, readily named attribute.

```html
<text fill="hsl(0 0% 99%)" stroke="hsl(0 0% 25%)" stroke-width="2">
	<!-- ... -->
</text>
```

There's only one hiccup with the code, due to the stroke's own nature. As the outline is drawn above the stroke, [and midway through](/stroke-midway-through), the lines tend to obscure the inner portions. To the rescue, the unsung hero that is the `paint-order` attribute.

```html
<text paint-order="stroke" fill="hsl(0 0% 99%)" stroke="hsl(0 0% 25%)" stroke-width="2">
	<!-- ... -->
</text>
```

With its value you dictate the order of operations. Add `stroke` and the outline is added _before_ the solid fill which follows. Add `stroke` and the effect is complete.

<Center element="figure" maxInlineSize="24rem">
	{@html html['outline-stroke']}
</Center>

Use a filter and you find a first, reasonable solution. Keep everything in the `<svg>` element and the `stroke` attribute might be all that you need. You can still use a `<filter>` element, though. After all, features abound once you understand the sequence. Useful or esoteric as they might be.

<Center maxInlineSize="30rem">
	<Squiggle />
</Center>
