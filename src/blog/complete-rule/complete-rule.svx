---
title: Complete rule
description: Choose how to fill the region of criss-crossing paths.
date: 2024-02-14T12:10:07
---

<script>
	import svg from './svg.js';
</script>

In a corner of the SVG standard, there lies an attribute, available as a CSS property as well, with a niche purpose: `fill-rule`. To understand the contribution, however, we first need a path, an example visual.

Far from being a lesson on path commands, in SVG you can draw any shape with a `path` element.

```html
<svg viewBox="0 0 20 20">
	<path d="..." fill="currentColor" />
</svg>
```

In the d attribute specifically you add a series of instructions, a sequence of letters and numbers starting with the letter `M` and a pair of coordinates.

```html
<path d="M 10 0" fill="currentColor" />
```

The string works to set the beginning of the path, and from this point, you continue the drawing with more precise commands. To draw a line, for instance, you can follow up the origin with the `L` character, and the position of the lines end.

```html
<path d="M 10 0 L 20 10" fill="currentColor" />
```

With just the two letters we can draw a rhombus quite rapidly, outlining the figure with the fourth vertices and concluding the path with the letter `Z`.

```html
<path d="M 10 0 L 20 10 L 10 20 L 0 10 Z" fill="currentColor" />
```

---

If you want to draw a shape point by point, in straight segments, you can actually forgo the `L` character and pile up the numbers.

```html
<path d="M 10 0 20 10 10 20 0 10 Z" fill="currentColor" />
```

Following the origin with the `M` character, the values are assumed to describe the points in the canvas.

---

You can draw a rhombus with a short string, but can also continue with another series of instructions. Once again, the sequence starts with the letter `M`, but follows the first first stretch.

In this manner you can draw complex shapes made of multiple sub-paths, opening the door to an intriguing option. If you wanted to draw the rotated square with a hole, for instance, you could try repeating the four-points structure within the larger figure.

```html
<path d="M 10 0 20 10 10 20 0 10 Z M 10 5 15 10 10 15 5 10 Z" fill="currentColor" />
```

Here we draw a large rhombus and then a smaller, half-rhombus with the same center point, 5, 5. Test the code, however, and you see only one polygon, the larger one.

{@html svg['line-markers']}

<figure class="[ center-frame ]" data-size="medium">
	{@html svg['winding-clockwise']}
</figure>

I marked the vertices and the general direction of the sub-paths to help out. The direction is particularly important to explain the issue at hand, and why you don't see the gap.

Scalable vector graphics paint shapes with the `fill` attribute in the so-called _fill region_. And to determine the area, the specification describes an algorithm also known as [_winding rule_](https://svgwg.org/svg2-draft/painting.html#WindingRule). Luckily, you don't have to master complex mathematics to understand the concept, and the rhombus comes back to guide us.

Starting with a value of 0, you update a counter every time that you cross a path. If this path is drawn with a clockwise direction, add one. If the path is drawn counterclockwise, subtract the same amount.

With our path we drew both figures clockwise, and the tallying is quite easy to perform.

<figure class="[ center-frame ]">
	{@html svg['algorithm-clockwise']}
</figure>

0 for the portions outside of the larger figure, 1 between the two sub-paths and 2 for the innermost portion.

How does this help? SVG makes a decision based on the integer value. And by default, declares that points which fall in the fill region, points which are drawn, are those where the counter is not zero. No wonder the code realized the entire rhombus.

This is the default behavior, and is dictated by the starting value of fill-rule: `nonzero`.

But you have an alternative: `evenodd`.

<!-- prettier-ignore -->
```html
<path fill-rule="evenodd" d="M 10 0 20 10 10 20 0 10 Z M 10 5 15 10 10 15 5 10 Z" fill="currentColor" />
```

In this instance what is inside or outside of the fill region flips every time you intersect a path. Odd regions are in — the space between subpaths —, and even areas are out — including our center.

<figure class="[ center-frame ]" data-size="medium">
	{@html svg['fill-rules']}
</figure>

As you break down the algorithm the logic is not that long-winded, and actually pretty straightforward. And once you understand the rule, you may realize that you won't even need the attribute.

Going back to the visual, the counter grows every time you cross a sub-path because every sub-path is drawn with the same twist.

What happens if you reverse the trend between the two instructions? You might have anticipated the result, but this is exactly how you can "draw" the hole.

<figure class="[ center-frame ]" data-size="medium">
	{@html svg['winding-counter-clockwise']}
</figure>

And while you may not need an explanation by now, I hope you won't mind an additional graphic detailing the reason.

<figure class="[ center-frame ]">
	{@html svg['algorithm-counter-clockwise']}
</figure>

As the direction flips, the counter grows and recedes, meaning the inner portion is now 0.

The points within the area are out, not part of the fill region, and as your astute mind will realize, this is regardless of the fill rule. Zero and even.

You have a choice at this point. Pick the commands judiciously, flipping the direction to and fro, and you are assured of the outcome. Draw the subpaths with the same winding, clockwise or counterclockwise, and rely on `fill-rule` to change the painting afterwards.

On the one end you have a predictable result. On the other, the option to choose a different spin. With the HTML attribute, but also CSS. I might have mentioned it, but you do have the opportunity to change the value in the stylesheet.

```css
path {
	fill-rule: evenodd;
}
```

Thanks to CSS specificity, the declaration triumphs over the presentational attribute, letting you appreciate the different picture. Assuming of course, you have the freedom to do so.

<figure class="[ center-frame ]">
	{@html svg['css-rule']}
</figure>
