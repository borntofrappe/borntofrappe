---
title: Something is brewing
description: Draw and animate vector graphics to create a charming loader.
date: 2023-03-13 9:24:48
---

<script>
    import Center from '$lib/components/blog/Center.svelte';

    import svg from './svg.js';
    import Scene from './Scene.svelte';
</script>

The problem: you need a visual to pair the assuredly brief, but inevitable delay a page needs to load.

The tagline: improve the experience with SVG and CSS.

## SVG syntax

The page in question offers a series of recipes, factual or otherwise, so it is only natural to conjure up SVG elements to draw a piece of kitchenware.

### Pot

Just a handful of elements is enough to realize a convincing cauldron. First a rounded rectangle for the top.

```html
<g fill="#2e2e2c">
	<rect x="-20" width="40" height="8" rx="4" />
</g>
```

Having the `rx` attribute exactly as half the smaller size, as half the height, means the ends are perfectly round. Past the rectangle, a `<path>` crafting the rotund container with an overblown arc.

```html
<g fill="#2e2e2c">
	<!-- ... -->
	<path d="M -16 4 a 22 22 0 1 0 32 0" />
</g>
```

Finally, two rounded lines protruding from the sides to support the piece.

```html
<g fill="none" stroke="#2e2e2c" stroke-width="6" stroke-linecap="round">
	<path d="M -5 20 l -10 20" />
	<path d="M 5 20 l 10 20" />
</g>
```

With the same color in the `fill` and `stroke` attributes the elements coalesce in the solid recipient.

<Center element="figure" maxInlineSize="28rem">
    {@html svg['cauldron']}
</Center>

### Flames

The `<path>` element is once more equipped for the heat source. A couple of bezier curves, pointing upwards, work to create a single candle-lit figure.

```html
<path fill="#f04545" d="M 0 0 c -3.5 0 -4.5 -4.5 0 -6.5 4.5 1.5 3.5 6.5 0 6.5" />
```

To detail the visual you can add another, smaller shape right on top. Another set of curves shining brightly in the heart of the larger whole. Here you can carefully manicure a `d` attribute with smaller values. Or, use the very same string and scale the result down.

```html
<!-- ...path -->
<path
	transform="scale(0.5)"
	fill="#e8da38"
	d="M 0 0 c -3.5 0 -4.5 -4.5 0 -6.5 4.5 1.5 3.5 6.5 0 6.5"
/>
```

As you draw the shape from the bottom, the scaling operation has the second path reduce itself from the low origin.

Add a soft stroke around both shapes.

```html
<g stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
	<!-- ...paths -->
</g>
```

And making sure to use the same color as the `fill` attribute, you eventually light the fire.

<Center element="figure" maxInlineSize="28rem">
    {@html svg['flame']}
</Center>

No matter how beautiful, a solitary flame is not enogh for our cooking needs, though. You can actually give an `id` attribute to the shape and repeat it right afterwards, but for the sake of clarity, define a group in a <defs> element.

```html
<defs>
	<g id="flame">
		<!-- ...paths -->
	</g>
</defs>
```

To show the single flame back refer to the identifier through the `<use>` element. To complete the set repeat the instructions with different horizontal offsets.

The order here matters. To have the outer shapes behind include the copies _before_ the flames in the middle.

```html
<use transform="translate(8 0)" href="#flame" />
<use transform="translate(-8 0)" href="#flame" />
<use transform="translate(4 0)" href="#flame" />
<use transform="translate(-4 0)" href="#flame" />
<use href="#flame" />
```

Aside from the source order, SVG transformations help tremendously. Not only you are able to place the flames wherever needed. Through the rotate function you can spread the fire outwards.

```html
<use transform="translate(8 0) rotate(28)" href="#flame" />
<use transform="translate(-8 0) rotate(-28)" href="#flame" />
<!-- ... -->
```

And with the now-familiar scale keyword you can even reduce the size as you move away from the center.

```html
<use transform="translate(8 0) rotate(28) scale(0.8)" href="#flame" />
<!-- ... -->
```

How much to angle, how much to scale down each additional pair is a matter of taste, and one of the most entertaining parts of writing SVG in a code editor. Experiment with different values until you find a heart-warming sight.

<Center element="figure" maxInlineSize="28rem">
    {@html svg['flames']}
</Center>

### Goo

Even with a limited number of SVG elements, it doesn't take much to embellish the visual. Consider the stylized cauldron, for instance. Add a few colorful lines on the right end — perhaps through `<path>` elements with a noticeable, yellow-ish stroke — and the concoction becomes much more believable.

<Center element="figure" maxInlineSize="28rem">
    {@html svg['goo']}
</Center>

You can't see inside, but there is no doubt that something is warming up, and the exquisite elixir is going to reach the surface and escape the frame. Especially with such kindling.

### Bubbles

Let's exaggerate further. Reaching the boiling point it is only natural to spot a few bubbles, and a perfect opportunity to rehearse the workflow introduced with the flames. One circle element works as a base.

```html
<circle r="4" fill="#f6c159" />
```

A smaller, lighter circle slightly off center details the solid shape with a tentative light source.

<!-- prettier-ignore -->
```html
<circle r="4" fill="#f6c159" />
<circle r="1.5" cx="1" cy="-1" fill="#f1daae" />
```

One definition — similarly to the flames we enjoy more than one copy.

```html
<defs>
	<g id="bubble">
		<!-- ...circles -->
	</g>
</defs>
```

Multiple use elements.

```html
<use transform="translate(10 -16)" href="#bubble" />
<use transform="translate(-2 -10) scale(0.8)" href="#bubble" />
<use transform="translate(-12 -20) scale(0.6)" href="#bubble" />
```

Positioned and scaled to your heart's content.

<Center element="figure" maxInlineSize="28rem">
    {@html svg['bubbles']}
</Center>

### Spoon

One last instruction before we dive in the entertaining realm of cascading stylesheets. Add a line just behind the cauldron.

<Center element="figure" maxInlineSize="28rem">
    {@html svg['scene']}
</Center>

And the scene is set. After all, it would be irresponsible to leave the preparation unattended.

## CSS properties

As in the kitchen, it is helpful to have a plan. The goal here is to update the visual in a few ways, but always through the `transform` attribute. Or, to be technical, through the `transform` property.

```css
.element {
	transform: scale(1.25);
}
```

In the stylesheet, thanks to the concept of specificity, the transformation takes precedence on whichever value is set in the markup.

Back to the plan. It would be most charming to have the flames grow in size and perhaps even flicker. On top of this animation we can then treat ourself. Thicker gooey lines, bubbles actually floating, the spoon helpfully stirring the mixture. You might be suprised how much is possible with just a few functions.

### Flicker

To scale the flames you could update the `<use>` elements. Add a class on the instances.

```html
<use class="flicker" href="#flames" />
```

Resize the copy with the appropriate function.

```css
.flicker {
	transform: scale(0.7);
}
```

This works swimmingly for the central flame, but for the neighboring copies you would need to meddle with the SVG syntax to update the origin point, the point from where the animation takes place.

```html
<g transform="translate(8 0) rotate(28) scale(0.8)">
	<use class="flicker" href="#flames" />
</g>
```

For a more detailed explanation, I'll gladly refer you to a couple of articles devoted to [SVG transformations](/svg-transform) and the concept of [origin](/svg-origin), but in a few words, you would need to apply a transformation beforehand so that you scale the flame from the bottom. Exactly as you first resized the `<path>` to draw the brighter body.

However, and at least for the current current project, there is a better way. Add the class _on the definition_ itself.

```html
<defs>
	<g class="flicker" id="flame">
		<!-- ...paths -->
	</g>
</defs>
```

And accepting you are going to change every instance in the same manner, you can then move on to the actual animation.

Easing functions, durations. Even the structure of the keyframes is ground for exploration. For the possibly simplest change restore the size to the original measure.

```css
.flicker {
	transform: scale(0.7);
	animation: flicker 6s infinite;
}

@keyframes flicker {
	50% {
		transform: scale(1);
	}
}
```

A subtle effect with hopefully grander consequences.

<Center element="figure" maxInlineSize="30rem">
    <Scene animations={['flicker']} transition={false} />
</Center>

<!--
### Float

The translate function is more than enough to move the bubbles vertically. The effect is simple, but becomes much more impressive with a bit of trickery. Since SVG elements are drawn in sequence, with later shapes above previous one, add the bubbldes _before_ the cauldron.

```html
<svg>
	...bubbles
	...cauldron set
</svg>
```

Translate the shapes in the bottom half, in the same area covered by the large container and the circles disappear from sight.

```html
<g>
	<use class="float" transform="translate(0 20)" href="#bubble">
</g>
```

All you need in CSS is to then move the bubbles back in the original position.

```css
.float {
	animation: float 10s;
}

@keyframes float {
	to {
		transform: translateY(0px);
	}
}
```

Beyond the duration and easing functions you can refine the effect adding a delay.

<Center element="figure" maxInlineSize="30rem">
    <Scene animations={['flicker', 'float']} transition={false} />
</Center>

### Stir

```html
<path d="M 0 0 v -30" />
```

```css
.stir {
	transform: rotate(-35deg);
	animation: stir 6s;
}
@keyframes stir {
	50% {
		transform: rotate(35deg);
	}
}
```

<Center element="figure" maxInlineSize="30rem">
    <Scene animations={['flicker', 'float', 'stir']} transition={false} />
</Center>

## Finishing touches

<Center element="figure" maxInlineSize="30rem">
    <Scene  />
</Center>
-->
