---
title: Word order
description: Play with the arrangement of a few words when writing code.
date: 2024-06-11T10:08:50
---

<script>
	import svg from './svg.js';
	import ChildSwap from './ChildSwap.svelte';
</script>

I strive  to write about something useful, and even when an article doesn't have one thing to teach, it tries to have something to share, like [a promising custom element](/jot-down). What follows may fail this standard, indulging in two lines of code which bother my little brain. All this to say feel free to continue, but less to complain for what you will see.

<figure class="[ center-frame ]" data-size="small">
	{@html svg['road-sign']}
</figure>

The first instruction is less than a concern and more of a pet peeve with JavaScript import statements. With the keyword you declare the resource you want to include from a library which then appears by name. The formula is effective, but it sure would be great if you could swap the order of the two steps, if you could specify the name of the package and then what to import.

<ChildSwap childrenText={['import { LitElement, html }', "from 'lit'"]} />

It is quite silly, but in some code editors the change would greatly improve the writing experience, with autocomplete and helpful suggestions â€” hint hint. After all, you rely on a third-party script for features you don't know by heart, or at least not yet.

The second line has wild implications and relates to SQL commands. Among the possible database operations you have the option to delete from a table starting with the `DELETE` keyword and the table's name. I know that a condition is going to complete the logic, so that you end up scratching only a subset of rows, but I'm scared just to think of the dangerous, deleting code. I am only comforted by the fact that the line needs one semicolon to go through, and without the character the system would patiently wait.

<ChildSwap childrenText={['DELETE FROM "users"', 'WHERE "name" = \'deleted\'', ';']} />

Most assuredly, there is a reason for both lines of code, the vestige of a long and thoughtful process, but it might be conducive to ponder the order, the syntax for code to come. And perhaps suggest a more active participation in shaping new standards, so that when the time comes, people won't have to complain about amusing sequences and complex CSS selectors. At least not too much.