---
title: Build in pieces
description: Repeat a single SVG element a few more times for a most curious application.
date: 2023-05-18T17:52:38
---

<script>
    import Center from '$lib/components/blog/Center.svelte';

    import svg from './svg.js';
</script>

In the context of scalable vector graphics, the `<use>` element allows to repeat drawing instructions with a concise syntax. And yet, it is also possible to repeat the element and solve a rather peculiar need.

## Pieces

Say you've drawn a flower.

<Center element="figure" maxInlineSize="18rem">
    {@html svg['piece']}
</Center>

An `<ellipse>` here, a couple of `<path>`s there. There's not much to the composition, but the code adds up to a few lines already.

In the moment you want to repeat the flower for a comforting bed, you don't need to copy-paste everything. Add an identifier to a parent group element.

```html
<g id="flower">
	<!-- ...flower -->
</g>
```

With the `<use>` element, then, reproduce the visual.

<!-- prettier-ignore -->
```html
<use href="#flower" x="10" />
<use href="#flower" x="-10" />
```

Offset the instances with the `x` attribute and you find the stylish flower now on the right, now on the left. A veritable copy, without actually copying the underlying code. Truly convenient.

<Center element="figure" maxInlineSize="30rem">
    {@html svg['pieces']}
</Center>

## Puzzle

Say you add the flowers to a far more elaborate drawing. Well, I did, and to keep you intrigued, I won't show you the result until the very, satisfying end.

```html
<svg viewBox="0 0 60 60">
	<!-- ...drawing _with_ flowers -->
</svg>
```

The entire graphic fits in a `viewBox` 60 units wide and tall; a perfectly squared canvas.

Say you now want to make a puzzle out of the complex markup. In this instance, you can swap the `<svg>` element for a `<symbol>`, add an identifier and relish in the possibility of using the `<use>` element once more.

```html
<symbol id="painting" viewBox="0 0 60 60">
	<!-- ...drawing _with_ flowers -->
</symbol>
```

Indeed, as you add the `<symbol>` element in the body of a brand new `<svg>`, you dont't see the painting immediately.

```html
<svg viewBox="0 0 2 2">
	<!-- symbol#painting -->
</svg>
```

It is only as you refer to the symbol, through the now-infamous `<use>` element, that you find the drawing in the fresh canvas.

```html
<svg viewBox="0 0 2 2">
	<!-- symbol#painting -->

	<use href="#painting" />
</svg>
```

A word on said canvas: why 2 units wide and tall? Just a preference to work with small integers. The instructions in the `<symbol>` element are still relative to the symbol's own canvas, but the visual is scaled to the new boundaries. And as an appetizer, let me offer an example with a secretive, placeholder image.

<Center element="figure" maxInlineSize="18rem">
    {@html svg['placeholder']}
</Center>
