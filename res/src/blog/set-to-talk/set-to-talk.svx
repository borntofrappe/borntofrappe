---
title: Set to talk
description: Show text one vector character at a time.
date: 2023-04-10 17:35:24
---

<script>
	import svg from './svg.js';
	import SetToAttribute from './SetToAttribute.svelte';
	import SetToTalk from './SetToTalk.svelte';
</script>

Next to the `<animate>` element, `<set>` is impervious and imperative.

Specify the name of the attribute, a value, and the SVG element will assume the measure at once.

```html
<circle r="5">
	<set attributeName="fill" to="10" />
</circle>
```

It is possible to delay the operation with the `begin` attribute, perhaps with a time offset, but the instruction is definite and clear. Without interpolation, the attribute is set in place.

Knowing this, it is possible to recreate a typewriter animation rather succinctly.

## Letters

Instead of adding text directly in the `<text>` element.

```html
<text>Hi there!</text>
```

Break down the line into individual characters and with the appropriate `<tspan>` tags.

```html
<text>
	<tspan>H</tspan>
	<tspan>i</tspan>
	<!-- ... -->
</text>
```

This is one place where JavaScript helps tremendously. And with Svelte, the authoring experience is simplified considerably with an `each` block.

```svelte
<text>
	{#each 'Hi there!'.split('') as letter}
		<tspan>{letter}</tspan>
	{/each}
</text>
```

Whether you repeat the syntax yourself or rely on a utility, however, the result is the same. You have a series of neighboring `<tspan>` elements presenting the letters side by side.

## Set

With multiple, sibling `<tspan>` the idea is rather simple:

- hide the characters, for instance through the `opacity` attribute

  ```svelte
  <tspan>
  	<set attributeName="opacity" to="0" />
  	{letter}
  </tspan>
  ```

- reset the value with a time delay

  If you were to repeat the elements yourself you'd have to increase the offset for each additional `<tspan>`, but with Svelte, the `each` block gifts an incrementing value as a second argument

  ```svelte
  {#each 'Hi there'.split('') as letter, i}
  	<!-- ... -->
  {/each}
  ```

  Inject the index with an arbitrary weight alongside the previous `<set>`.

  ```svelte
  <set attributeName="opacity" to="0" />
  <set begin={i * 0.05} attributeName="opacity" to="1" />
  ```

With just two steps, the characters are shown in sequence. One by one.

<SetToAttribute attributeName="opacity" />

But I might say, the characters _should_ be shown in sequence. At least on Firefox and at the time of writing, the animation does not work. At fault, a puzzling and highly specific issue with the `opacity` attribute.

Set the value on any `<tspan>` element.

```html
<text>Hi <tspan opacity="0">Firefox</tspan></text>
```

And Firefox does not alter the opacity at all.

{@html svg['opacity']}

Ironic snippets aside, there is a way around the issue in the SVG spec.

Vector elements have a fill, and possibly a stroke. Conveniently, it is possible to alter the opacity of these portions with two distinct attributes: `fill-opacity` and `stroke-opacity`.

Update the code to use `fill-opacity` in place of the more general attribute.

```diff
-<tspan opacity="0">Firefox</tspan>
+<tspan fill-opacity="0">Firefox</tspan>
```

And this time the instruction does work. Even in Firefox you find the short greeting.

{@html svg['fill-opacity']}

And in the context of our typing animation, the characters are typed in, in their expected sequence.

<SetToAttribute attributeName="fill-opacity" />

There is a [bug report](https://bugzilla.mozilla.org/show_bug.cgi?id=1751025) detailing the problem, but until the issue is resolved, you find a quick alternative in more specific instructions.

---

To show you the animations at the press of a button I had to rely on JavaScript other than to save a few keystrokes. In this specific instance, I pause the `<set>` elements indefinitely.

```html
<set begin="indefinite" attributeName="fill-opacity" to="1" />
```

And trigger the functionality through the node, on the basis of the current time.

```js
const currentTime = svg.getCurrentTime();
set.setAttribute('begin', currentTime);
```

For each additional element I increment the offset, always in the script, but you definitely do not need such a roundabout setup to play the animation as you code along. There is plenty you achieve with SVG syntax, SMIL _and_ without a script.

With SVG syntax you can draw crisp visuals to honor a beloved title from long ago.

<figure class="[ center-frame ]" data-size="medium">
    <SetToTalk />
</figure>

With SMIL you can take the `<set>` element and experiment a bit more with the animation. After all, there is no particular reason _that_ pixelated phone is sitting in an empty room, is there?
